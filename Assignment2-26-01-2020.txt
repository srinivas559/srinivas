Assignment 2

Question 1

package Package1;
import java.util.Scanner;
public class Example4 {

	public static void main(String[] args) {
		int[] a=new int[10];
		Scanner scan=new Scanner(System.in);
		System.out.println("Enter the length of array");
		int n=scan.nextInt();
		
		System.out.println("Enter the elements in array");
		for(int i=0;i<n;i++)
		{
			a[i]=scan.nextInt();
		}
          
		for(int i=0;i<n;i++)
		{
			for(int j=0;j<n;j++)
			{
				if(a[i]<a[j])
				{
					int t=a[i];
					a[i]=a[j];
					a[j]=t;
				}
				
			}
		 
		}
		}
}


Question 2

package Package1;

import java.util.Scanner;
public class Example5 {
public static void main(String[] args) {
		float[] a=new float[10];
		Scanner scan=new Scanner(System.in);
		System.out.println("Enter the length of array");
		int n=scan.nextInt();
		
		System.out.println("Enter the elements in array");
		for(int i=0;i<n;i++)
		{
			a[i]=scan.nextFloat();
		}
          
		for(int i=0;i<n;i++)
		{
			for(int j=0;j<n;j++)
			{
				if(a[i]<a[j])
				{
					float t=a[i];
					a[i]=a[j];
					a[j]=t;
				}
				
			}
		 
		}
		}
}

Question 3

package Package1;

public class Example6 { 
/* Class Pair is used to return two values from getMinMax() */
    static class Pair { 
  
        int min; 
        int max; 
    } 
  
    static Pair getMinMax(int arr[], int n) { 
        Pair minmax = new  Pair(); 
        int i; 
  
        /*If there is only one element then return it as min and max both*/
        if (n == 1) { 
            minmax.max = arr[0]; 
            minmax.min = arr[0]; 
            return minmax; 
        } 
  
        /* If there are more than one elements, then initialize min  
    and max*/
        if (arr[0] > arr[1]) { 
            minmax.max = arr[0]; 
            minmax.min = arr[1]; 
        } else { 
            minmax.max = arr[1]; 
            minmax.min = arr[0]; 
        } 
  
        for (i = 2; i < n; i++) { 
            if (arr[i] > minmax.max) { 
                minmax.max = arr[i]; 
            } else if (arr[i] < minmax.min) { 
                minmax.min = arr[i]; 
            } 
        } 
  
        return minmax; 
    } 
  
    /* Driver program to test above function */
    public static void main(String args[]) { 
        int arr[] = {1000, 11, 445, 1, 330, 3000}; 
        int arr_size = 6; 
        Pair minmax = getMinMax(arr, arr_size); 
        System.out.printf("\nMinimum element is %d", minmax.min); 
        System.out.printf("\nMaximum element is %d", minmax.max); 
  
    } 
  
} 

Question 4

import java.util.Arrays; 
  
class GFG { 
  
    // Function to remove the element 
    public static int[] removeTheElement(int[] arr, 
                                          int index) 
    { 
  
        // If the array is empty 
        // or the index is not in array range 
        // return the original array 
        if (arr == null
            || index < 0
            || index >= arr.length) { 
  
            return arr; 
        } 
  
        // Create another array of size one less 
        int[] anotherArray = new int[arr.length - 1]; 
  
        // Copy the elements except the index 
        // from original array to the other array 
        for (int i = 0, k = 0; i < arr.length; i++) { 
  
            // if the index is 
            // the removal element index 
            if (i == index) { 
                continue; 
            } 
  
            // if the index is not 
            // the removal element index 
            anotherArray[k++] = arr[i]; 
        } 
  
        // return the resultant array 
        return anotherArray; 
    } 
  
    // Driver Code 
    public static void main(String[] args) 
    { 
  
        // Get the array 
        int[] arr = { 1, 2, 3, 4, 5 }; 
  
        // Print the resultant array 
        System.out.println("Original Array: "
                           + Arrays.toString(arr)); 
  
        // Get the specific index 
        int index = 2; 
  
        // Print the index 
        System.out.println("Index to be removed: "
                           + index); 
  
        // Remove the element 
        arr = removeTheElement(arr, index); 
  
        // Print the resultant array 
        System.out.println("Resultant Array: "
                           + Arrays.toString(arr)); 
    } 
} 

Question 5

import java.io.*; 
import java.lang.*; 
import java.util.*; 
  
class GFG { 
  
    // Function to insert x in arr at position pos 
    public static int[] insertX(int n, int arr[], 
                                int x, int pos) 
    { 
        int i; 
  
        // create a new array of size n+1 
        int newarr[] = new int[n + 1]; 
  
        // insert the elements from 
        // the old array into the new array 
        // insert all elements till pos 
        // then insert x at pos 
        // then insert rest of the elements 
        for (i = 0; i < n + 1; i++) { 
            if (i < pos - 1) 
                newarr[i] = arr[i]; 
            else if (i == pos - 1) 
                newarr[i] = x; 
            else
                newarr[i] = arr[i - 1]; 
        } 
        return newarr; 
    } 
  
    // Driver code 
    public static void main(String[] args) 
    { 
  
        int n = 10; 
        int i; 
  
        // initial array of size 10 
        int arr[] 
            = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }; 
  
        // print the original array 
        System.out.println("Initial Array:\n"
                           + Arrays.toString(arr)); 
  
        // element to be inserted 
        int x = 50; 
  
        // position at which element 
        // is to be inserted 
        int pos = 5; 
  
        // call the method to insert x 
        // in arr at position pos 
        arr = insertX(n, arr, x, pos); 
  
        
        System.out.println("\nArray with " + x + " inserted at position "+ pos + "\n"+Arrays.toString(arr)); 
    } 
} 




